@model IndproCareer_2018.ViewModels.RegisterViewModel

@{
    ViewBag.Title = "Register";
}

@ViewBag.Message

@using (Html.BeginForm("Register", "Account", FormMethod.Post, new { enctype = "multipart/form-data", name = "myForm" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="container">
        <div class="row">
            <div class="col-xs-12 col-sm-12">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title" style="margin-bottom:20px"><span class="pull-left">Register</span></h3>

                    </div>

                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-6 col-sm-6 col-xs-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.RoleName, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.DropDownListFor(model => model.RoleName, ViewBag.Roles as SelectList, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.RoleName, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EditorFor(model => model.LastName, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EnumDropDownListFor(model => model.Gender, "Please Select Role", htmlAttributes: new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                                </div>

                            </div>

                            <div class="col-md-6 col-sm-6 col-xs-6">

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Country, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @*@Html.EditorFor(model => model.Country, new { htmlAttributes = new { @class = "form-control" } })*@
                                    @Html.DropDownList("Country", ViewBag.Country as SelectList, "Please Select a Country", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Country, "", new { @class = "text-danger" })
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @*@Html.EditorFor(model => model.State, new { htmlAttributes = new { @class = "form-control" } })*@
                                    @Html.DropDownList("State", new SelectList(string.Empty, "Value", "Text"), "-- Please select a State --", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @*@Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control" } })*@
                                    @Html.DropDownList("City", new SelectList(string.Empty, "Value", "Text"), "-- Please select a State --", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label col-md-3" })
                                    @Html.EditorFor(model => model.Pincode, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })

                                </div>

                                <div class="form-group">
                                    <div class="col-md-offset-2 col-md-10">
                                        <input type="submit" value="Create" class="btn btn-success" />
                                        @Html.ActionLink("Back to Login", "Login", new { }, new { @class = "btn btn-success" })
                                    </div>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </div>
    </div>
}




@section Scripts
{
    @*<script src="~/Scripts/jquery-1.10.2.js"></script>
    <script src="~/Scripts/jquery-1.10.2.min.js"></script>*@

    <script type="text/javascript">
        $(document).ready(function () {

            //Country Dropdown Selectedchange event
            $("#Country").change(function () {
                var id=$("#Country").val() ;
                debugger;
                $("#State").empty();
                $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetStates")?id=' + id, // Calling json method
                    dataType: 'json',
                    data: { id: id },
                    // Get Selected Country ID.
                    success: function (states) {
                        $.each(states, function (i, state) {
                            $("#State").append('<option value="' + state.Value + '">' + state.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve states.' + ex);
                    }
                });
                return false;
            })

            $("#State").change(function () {
                $("#City").empty();
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("GetCitis")', // Calling json method
                    dataType: 'json',
                    data: { id: $("#State").val() },
                    // Get Selected Country ID.
                    success: function (citis) {
                        $.each(citis, function (i, citi) {
                            $("#City").append('<option value="' + citi.Value + '">' + citi.Text + '</option>');
                        });
                    },
                    error: function (ex) {
                        alert('Failed to retrieve citi.' + ex);
                    }
                });
                return false;
            })

        });

    </script>
}